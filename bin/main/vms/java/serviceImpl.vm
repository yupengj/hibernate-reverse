package ${bean.beanPackage};

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.gantang.framework.bo.DataContainer;
import com.gantang.framework.bo.OrderEnum;
import com.gantang.framework.bo.PageResult;
import com.gantang.framework.bo.QueryCriteria;
import com.gantang.framework.service.AbstractBaseService;
import com.gantang.framework.util.dao.HqlUtils;

import ${bean.beanPackagePrefix}.service.${bean.beanName}Service;
import ${bean.beanPackagePrefix}.dao.${bean.beanName}Dao;
import ${bean.beanPackagePrefix}.model.${bean.beanName};


/**
 * ${bean.beanName}ServiceImpl
 * 
 * @author $!{annotationAuthor}
 *
 */
@Service("${bean.nameVariable}Service")
public class ${bean.beanName}ServiceImpl extends AbstractBaseService implements ${bean.beanName}Service {

	@Autowired
	#set($dao="Dao")
	#set($daoName=${bean.nameVariable}+${dao})
${bean.beanName}Dao ${daoName};

	/**
	 * QueryCriteria 查询
	 *
	 * @param criteria
	 *            criteria
	 * 
	 * @return PageResult
	 */
	public PageResult<${bean.beanName}> doFindByCriteria(QueryCriteria criteria) {
		String queryEntry = "select ${bean.nameVariable} ";
		// 设定查询条件
		String[] whereBodies = new String[]{};
		String fromJoinSubClause = "from ${bean.beanName} ${bean.nameVariable}";
		Map<String, Object> params = criteria.getQueryCondition();
		String orderField = criteria.getOrderField();
		OrderEnum orderDirection = criteria.getOrderDirection();
		// 创建查询hql
		String hql = HqlUtils.generateHql(queryEntry, fromJoinSubClause, whereBodies, orderField, orderDirection, params);
		int pageSize = criteria.getPageSize();
		int startIndex = criteria.getStartIndex();
		// 取得查询结果集
		@SuppressWarnings("unchecked")
		PageResult<${bean.beanName}> result = (PageResult<${bean.beanName}>) ${daoName}.query(hql, HqlUtils.generateCountHql(hql, null), params, startIndex,
				pageSize);
		return result;
	}

	/**
	 * find ${bean.beanName} by id
	 *
	 * @param id
	 *            主键
	 * @return ${bean.beanName}
	 */
	public ${bean.beanName} doFindById(Long id) {
		return ${daoName}.findById(id);
	}

	/**
	 * 可编辑表格中的数据的批量保存.
	 *
	 * @param dataContainer
	 *            包含所有新增、修改、删除
	 */
	public void doSave(DataContainer<${bean.beanName}> dataContainer) {
		if (dataContainer.getRemovedData() != null) {
			for (${bean.beanName} ${bean.nameVariable} : dataContainer.getRemovedData()) {
				this.doDelete(${bean.nameVariable});
			}
		}
		if (dataContainer.getModifiedData() != null) {
			for (${bean.beanName} ${bean.nameVariable} : dataContainer.getModifiedData()) {
				this.doUpdate(${bean.nameVariable});
			}
		}
		if (dataContainer.getAddedData() != null) {
			for (${bean.beanName} ${bean.nameVariable} : dataContainer.getAddedData()) {
				this.doCreate(${bean.nameVariable});
			}
		}
	}

	/**
	 * create a ${bean.beanName}
	 *
	 * @param ${bean.nameVariable}
	 *            ${bean.nameVariable}
	 */
	public void doCreate(${bean.beanName} ${bean.nameVariable}) {
		${daoName}.save(${bean.nameVariable});
	}

	/**
	 * update a ${bean.beanName}
	 *
	 * @param ${bean.nameVariable}
	 *            ${bean.nameVariable}
	 */
	public void doUpdate(${bean.beanName} ${bean.nameVariable}) {
		${daoName}.save(${bean.nameVariable});
	}

	/**
	 * delete a ${bean.beanName}
	 *
	 * @param ${bean.nameVariable}
	 *            ${bean.nameVariable}
	 */
	public void doDelete(${bean.beanName} ${bean.nameVariable}) {
		${daoName}.remove(${bean.nameVariable});
	}
}